IN JQUERY THERE ARE 5 MOUSE EVENTS :

1) click
2) dblclick (FOR DOUBLE CLICK)
3) contextmenu (FOR RIGHT CLICK)
4) mouseenter (WHEN MOUSE ENTER OR HOVERS THE ELEMENT)
5) mouseleave (WHEN MOUSE LEAVES OR UNHOVER THE SELECTED ELEMENT)

LAST: there is also a hover EVENT which is combination of MOUSEENTER AND MOUSELEAVE





IN JQUERY THERE ARE 3 MOUSE EVENTS :

1) keydown or keypress ( WHEN YOU PRESS A CERTAIN KEY )
2) keyup ( WHEN YOU LIFE THE KEY AFTER PRESSING )





IN JQUERY THERE ARE 5 FORM EVENTS :

1) focus (WHEN CLICKED IN SOME ELEMENT OF FORM MOSTLY USED WITH INPUT AND SELECT)
2) blur ( REVERSE OF FOCUS WHEN YOU UNFOCUS THE ELEMENT THEN IT RUNS)
3) change ( RUNS when certain change happens canbe applied on INPUT but mostly used in SELECT where we have to choose OPTIONS )
4) select ( When you SELECT the text in INPUT TAG )
5) submit ( WHEN you SUBMIT the form )






IN JQUERY THERE ARE 2 WINDOW EVENTS :

1) SCROLL (when you scroll it also WORKS ON OTHER DOM ELEMENTS LIKE CONTAINERS ETC)
2) RESIZE ( WHEN YOU RESIZE THE WINDOW )

NOTE-------   LOAD AND UNLOAD EVENTS ARE DEPRICIATED IB THE VERSION 3 BUT WORKS IN THE PREVIOUS VERSIONS LOAD IS SAME AS THE DOCUMENT.READY AND UNLOAD RUNS WHEN YOU CLOSE THE WINDOW!!!!












IN JQUERY THERE ARE 4 GET AND SET METHODS :

1) html ( GIVES THE HTML INSIDE AN ELEMENT INLCUDING ALL TAGS)
2) text ( GIVES THE TEXT INSIDE AN ELEMENT EXCLUSING ANY HTML TAG IT WILL RETURN EVERYTHING AS TEXT )
3) attr ( RETURNS THE VALUE FOR THE SPECIFIED ATTRIBIUTE OF AN ELEMENT )
4) val ( RETURNS THE VALUE. ITS CAN VE USED WITH ALL FORM ELEMENTS TO GET THEIR VALUE )


NOTE: ALL THESE METHODS ARE SIMILARLY USED FOR SETTING THE VALUE






IN JQUERY THERE ARE 4 CLASS METHODS :


1) addClass("CLASS1 CLASS2") NO COMMAS NEEDED
2) removeClass
3) toggleClass  ( COMBINATION OF BOTH ADCLASS AND REMOVECLASS )

REMEMBER: CSS-METHOD IS USED TO ADD INLINE CSS TO THE ELEMENT AS FOLLOW :   $("#BOX").css("color","red")

	  $("#BOX").css({
            opacity: 0,
            right: "700px",
            position: "relative",
          });


4) hasClass ( Return true or false for the presence of the CLASS )







IN JQUERY THERE ARE 2 ON AND OFF METHODS :

$("#box").on({
  click: function () {
    $(this).css("background", "orange");
  },
  mouseover: function () {
    $(this).css("background", "pink");
  },
  mouseout: function () {
    $(this).css("background", "lightblue");
  },
});

$("button").click(function () {
  $("#box").off("mouseover mouseout"); // USED FOR REMOVING AN EVENT FROM ELEMENT
});




APPEND AND PREPEND METHODS:

1) APPEND ( USED FPR APPENDING SOMETHING INSIDE ATLAST OF ELEMENT MEANS IN UL TAG THERE ARE 5 LI TAG THEN IF WE APPEND AN LI TAG IN UL IT WILL BE AT 6 POISTION )
2) PREPENT ( REVERSE OF APPEND )

AFTER AND BEFORE METHODS:

1) AFTER ( ADDS SOMETHING AFTER THE ELEMENT NOT INSIDE BUT AFTER THE SELECETE ELEMENT )
2) BEFORE ( ADDS SOMETHING BEFORE THE SELECED ELEMENT )


EMPTY AND REMOVE METHODS:

1) EMPTY ( CLEAN EVERYHTING INSIDE THE SELECTED ELEMENT ) (except PADDING MARGIN AND BORDERS )
2) REMOVE ( REMOVES SELECTED ELEMENT FROM THE DOM. )

CLONE METHOD : USED TO CLONE THE SELECTED ELEMENT WITH ALL STYLES ( YOU CAN THEB ALSO APPEND IT SOMEWHERE ) E.G $(".BOX").clone().appendTo(".box2")

REPLACEWITH METHOD : USED TO REPLACE SELECTEDELEMENT WITH ANOTHER ELEMENT OR PLAIN TEXT E.G $("p").replaceWith("<h1> MASHALLAH")







IN JQUERY THERE ARE 4 ON AND OFF METHODS :

1) WRAP METHOD: USED TO CREATE A PARENT OF THE SELECTED ELEMENT.

2) UNWRAP METHOD: USED TO REMOVE THE PARENT OF SELECTED ELEMENT IF RUN MULTIPLE TIMES WILL CONTINUE REMOVING ELEMENTS PARENT MULTIPLE TIMES.

3) WRAP ALL EMTHOD : USED TO WRAP ALL SELECTED ELEMENTS

4) WRAP INNER METHOD : USED TO CREATE THE INNER CONTENT FO THE ELEMENT NOT WRAPPING THE ELEMENT


IN JQUERY THERE ARE 8 WIDHT AND HEIGHT METHODS :

1) width  ( WIDTH OF CONTENT ONLY )
2) innerWidth ( WIDTH OF CONTENT + PADDING )
3) outerWidth ( WIDTH OF CONTENT + PADDING + BORDER )
4) outerWidth(true) ( WIDTH OF CONTENT + PADDING + BORDER + MARGIN)

YOU CAN ALSO SET THE WIDTH using E.G   $("p").width("400px"); BUT WILL SET ONLY INNER CONTENT WIDTH.







IN JQUERY THERE ARE 2 POSITION AND OFFSET METHODS :

1) POSTION: RETURNS POSITION OF ELEMENT WITH RESPECT TO PARENT ELEMENT IF SET "" POSITION RELATIVE TO PARENT "" OR DOCUMENT AND THE POSITION IS FROM OUTSIDE THE ELEMENT MEANS OUTSIDE THE BORDER

2) OFFSET: SAME AS POSITION BUT RETURN POISTION OF THE CONTENT NOT THE ELEMENT ( WILL EXVLUDE ALL THE BORDERS AND PADDING )

REMEMBER: YOU CAN ALSO SET THE OFFSET USING $("p").offset({top: 100, left: 100})





IN JQUERY THERE ARE 2 SCROLL METHODS :

1) scrollTop ( Return how much you scrolled with respect to top of window ) you can also set scrollTop $(window).scrollTop(0); WILL COME TO TOP OF SCREEN

2) scrollLeft ( With respect to left of screen means HORIZONTAL SCROLL )



SHOW, HIDE AND TOGGLE METHODS:

1) HIDE ( WILL ADD DISPLAY: NONE TO SELECTED ELEMENT )
2) SHOW ( WILL SHOW THE ELEMENT )
3) TOGGLE ( COMBINATION OF BOTH SHOW AND HIDE METHODS )

EXAMPLE:  $('p').toggle(3000, function() {
  console.log("I AM A CALLBACK AND WILL RUN ONCE THE ABOVE OPERATION HAS BEEN COMPLETED INSHALLAH")
})

THE SPEED CAN BE SLOW AND FAST AND BOTH SPEED AND CALLBACK FUNCTION ARE OPTIONAL !




JQUERY ANIMATE METHOD::

// THE PROPERY NAMES SHOULD BE IN CAMEL CASE UNLIKE CSS METHOD

$('p').animate({ top: '200px', fontSize: '2rem'}, 3000, () => {
  console.log("I AM A CALLBACK AND WILL RUN AFTER THE ANIMATION RUNS")
})

JQUERY STOP METHOD::

$('p').stop(); // IT USED TO STOP THE FIRST ANIMATION
$('p').stop(true); // IT USED TO ALL THE ANIMATIONS
$('p').stop(true, true); // IT WILL ANIMAETE INSTANTLY MEANS ATONCE IT WILL ANIMATE THE ELEMENT


REMEMBER: IT ALSO WORKS WITH FADE AND SLIDE METHODS!



JQUERY METHOD CHAINING::

$('p').css('background-color', 'green').slideUp(2000).slideDown(2000);
// THEY WILL RUN ONE AFTER ANOTHER



JQUERY DOM TRAVERSING METHODS



1)))))  JQUERY ANCESTOR METHODS::

1) parent ( WILL RETURN THE FIRST PARENT OF THE SELECTED ELEMENT )

2) parents ( WILL SELECT ALL THE PARENT, GRAND PARENT AND ON UNTIL BODY TAG )
$('p').parents().css('color', 'red');  //ALL PARENTS UNTIL BODY TAG
$('p').parents('#GRAND-PARENT').css('color', 'red'); // WILL COLOR ONLY GRAND PARENT


3) parentsUntil // WILL RETURN ALL PARENTS IN BETWEEN SELECTED ELEMENT AND PARENT UNTIL ELEMENT
$('p').parentsUntil('#GRAND-PARENT').css('color', 'red'); // WILL COLOR all ELEMENTS BETWEEN 'P TAG' AND ('#GRAND-PARENT')



4) offsetParent // WILL RETURN FIRST ELEMENT IN PARENTS WILL ( POISTIO: RELATIVE PROPERTY )
// IN CSS BODY TAG HAS ALWATYS CSS POSITIONRELATIVE SO NORMALLY IT WILL PICK BODY TAG IF NONE
// OF PARENTS GOT A CSS POSITION ELATIVE PROPERTY

5) closest

$('p').closest('div').css('color', 'red'); // WILL COLOR THE CLOSEST PARENT WITH A DIV TAG




2)))))  DESCENDANT METHODS::

1) CHILDREN

$('p').children().css('color', 'red'); // WILL COLOR ALL THE CHILDRENS BUT """NOT""" GRANCHILDREN AND ON
$('p').children('.test').css('color', 'red'); // WILL COLOR THE CHILDREN WITH THE CLASS "TEST"

2) FIND::

$('p').find('.test').css('color', 'red'); // WILL COLOR THE THE ELEMENT WITH THE ""TETS"" CLASS IN CHILDREN, GRANDCHILDREN AND ON AND ON
// AND IF FOUND MORE THAT ONE ELEMENT WITH THE ""TEST"" CLASS WILL COLOR ALL OF THEM


3)))))  SIBLINGS METHODS::


1) siblings ( WILL TARGET ALL SIBLING OF SELECTED ELEMENT )
2) next ( WILL TARGET FIRST SIBLING NEXT TO SELECED ELEMENT )
3) nextAll ( WILL TARGET ALL SIBLING NEXT TO SELECED ELEMENT )
3) nextUntil ( WILL TARGET ALL NEXT SIBLING INBETWEEN SELECTOR ELEMENT AND DEFINED ELEMENT)
4) prev ( WILL TARGET FIRST SIBLING PREVIOUS TO SELECED ELEMENT )
5) prevAll ( WILL TARGET ALL SIBLING NEXT TO SELECED ELEMENT )
6) prevUntil ( WILL TARGET ALL PREVIOUS SIBLING INBETWEEN SELECTOR ELEMENT AND DEFINED ELEMENT)


4)))))  FILTERING METHODS::

1) first ( WILL SELECT THE FIRST ELEMENT )
2) last ( WILL SELECT THE LAST ELEMENT )
3) eq ( $('ul li').eq(0).css('color', 'red'); ) ( WILL COLOR FIRST LI ELEMENT IN UL ) // -1 FOR LAST ELEMENT
4) filter ( $('ul li').filter('.test').css('color', 'red'); ) ( WILL COLOR THE ELEMENT WITH THE ""TEST CLASS"" )
// OR CAN DO SIMPALY            $('ul li.test').css('color', 'red');
5) not $('ul li').not('.test').css('color', 'red'); ( WILL COLOR ALL LI TAGS IN UL EXCEPT ONE WITH TEST CLASS )
6) slice  $('ul li').slice(1, 3).css('color', 'red'); ( WILL COLOR 2ND AND THIRD ELEMENT JUST LIKE JS SLICE METHOD )
( FIRST ELEMENT HAS 0 VALUE )




JQUERY HAS and IS SELECTOR


1) HAS ( $('p').has('span, b').css('background', 'red') )
( WILL CHECK FOR CHILDREN, GRANDCHILDREN AND ON AND ON TO SEE ALL THE P TAGS WITH THE SPAN TAG and bold tag INSIDE )
( REMEMBER YOU CAN ALSO CHECK FOR OTHER THING LIKE CLASSES )

2) IS ( $('p').parent().is('div') ) ( WILL RETURN EITHER TRUE OR FALSE ) ( THIS CONDITION CHECKS THAT IF THE PARENT OF SELECTOR SI DIV OR NOT )
( WORKS ONLY IN IF CONDITION AS IT RETURNS TRUE OR FALSE )


JQUERY EACH METHOD::  (just like a loop)

EACH ( $('p').each(function() {
  console.log($(this).text());
}) )



JQUERY EVENT OBJECTS PROPERTIES AND METHODS // BASICALLY THEY BELONG TO JAVASCRIPT BUT CAN BE USED IN JQUEY



























